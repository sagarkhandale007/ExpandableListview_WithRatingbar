package com.example.ratingbarapplication.database;import android.content.ContentValues;import android.content.Context;import android.database.Cursor;import android.database.sqlite.SQLiteDatabase;import android.database.sqlite.SQLiteOpenHelper;import android.widget.Toast;public class DataAccess extends SQLiteOpenHelper {	private Context mContext;	public static final String DATABASE_NAME = "RatingApp.db";	public DataAccess(Context context) {		super(context, DATABASE_NAME, null, 1);		this.mContext = context;		// TODO Auto-generated constructor stub	}	@Override	public void onCreate(SQLiteDatabase db) {		// TODO Auto-generated method stub		if (!db.isReadOnly()) {			// Enable foreign key constraints			db.execSQL("PRAGMA foreign_keys=ON;");		}		db.execSQL(AddRatingTable.CreateRatingTable);	}	@Override	public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {		// TODO Auto-generated method stub		db.execSQL("DROP TABLE IF EXISTS " + AddRatingTable.TableName);		onCreate(db);	}	//----------------------------------------------  insert data -----------------------------------------------------	public int insert(ContentValues contentValues, String tableName) {		SQLiteDatabase db = null;		try {			db = this.getWritableDatabase();			return (int) db.insert(tableName, null, contentValues);		} catch (Exception sqlException) {			// TODO: handle exception			sqlException.printStackTrace();			Toast.makeText(mContext, sqlException.getMessage().toString(), Toast.LENGTH_LONG).show();			return -1;		} finally {			if (db != null & db.isOpen() == true) {				db.close();			}		}	}	//----------------------------------------------  update data -----------------------------------------------------	public int update(ContentValues contentValues, String tableName, String whereClause, String[] WhereArgs) {		SQLiteDatabase db = null;		try {			db = this.getWritableDatabase();			// updating row			return db.update(tableName, contentValues, whereClause, WhereArgs);		} catch (Exception sqlException) {			// TODO: handle exception			sqlException.printStackTrace();			Toast.makeText(mContext, sqlException.getMessage().toString(), Toast.LENGTH_LONG).show();			return -1;		} finally {			if (db != null & db.isOpen() == true) {				db.close();			}		}	}	//----------------------------------------------  Get data -----------------------------------------------------	public Cursor GetRecords(String sql) {		Cursor cursor = null;		try {			SQLiteDatabase database = this.getReadableDatabase();			cursor = database.rawQuery(sql, null);			return cursor;		} catch (Exception sqlException) {			sqlException.printStackTrace();			return null;		} finally {			/*			 * if (cursor != null && cursor.isClosed() == false) {			 * cursor.close(); }			 */		}	}	//----------------------------------------------  delete data -----------------------------------------------------	public int deleteContact (String[] contentValues, String tableName){		SQLiteDatabase db = null;	{		try {		db = this.getWritableDatabase();		return (int) db.delete(tableName, null, contentValues);		}		 catch (Exception sqlException) {				// TODO: handle exception				sqlException.printStackTrace();				Toast.makeText(mContext, sqlException.getMessage().toString(), Toast.LENGTH_LONG).show();				return -1;			} finally {				if (db != null & db.isOpen() == true) {					db.close();				}			}	     	   }	}	public void delete(String tableName, String id, int ids){		SQLiteDatabase db = this.getWritableDatabase();		db.execSQL("DELETE FROM "+ tableName + " WHERE " + id + " = "+ids);		db.close();	}}